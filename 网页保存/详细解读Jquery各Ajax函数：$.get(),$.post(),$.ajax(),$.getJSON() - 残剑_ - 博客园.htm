<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>详细解读Jquery各Ajax函数：$.get(),$.post(),$.ajax(),$.getJSON() - 残剑_ - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=VDh8zSH1vx51MDqRT7hK220akQ58FjlaaeGuWBPhfOA1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/elf/bundle-elf.css?v=m1ffdAkdU6pLIBVVhuDiKZPtpJ6BKnevg8RIbTFCGUo1"/>
<link type="text/css" rel="stylesheet" href="/blog/customcss/122373.css?v=ZFEs1GsxTsRX6SiDRhrORG3NMqU%3d"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/liuling/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/liuling/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/liuling/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'liuling', cb_enable_mathjax=false;</script>
<script src="/bundles/blog-common.js?v=aylkQJf_ijtv7ej_alyVdy0hO1XXLpn-PLvbF_VAqUc1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/liuling/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/liuling/">残剑</a></h1>
<h2></h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/liuling/">首页</a></li>
<li><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://msg.cnblogs.com/send/%E6%AE%8B%E5%89%91_">联系</a></li>
<li><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/liuling/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/liuling/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			
<!--done-->
随笔- 105&nbsp;
文章- 3&nbsp;
评论- 168&nbsp;

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<div id="post_detail">
<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/liuling/archive/2013/02/07/sdafsd.html">详细解读Jquery各Ajax函数：$.get(),$.post(),$.ajax(),$.getJSON()</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><p>一，$.get(url,[data],[callback])</p>
<p>说明：url为请求地址，data为请求数据的列表(是可选的，也可以将要传的参数写在url里面)，callback为请求成功后的回调函数，该函数接受两个参数，第一个为服务器返回的数据，第二个参数为服务器的状态，是可选参数。而其中，服务器返回数据的格式其实是字符串形势，并不是我们想要的json数据格式，在此引用只是为了对比说明。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $.get("data.php",$("#firstName.val()"),<span style="color: #0000ff;">function</span><span style="color: #000000;">(data){
</span><span style="color: #008080;">2</span> 
<span style="color: #008080;">3</span> 　　$("#getResponse").html(data); }<span style="color: #008000;">//</span><span style="color: #008000;">返回的data是字符串类型</span>
<span style="color: #008080;">4</span> 
<span style="color: #008080;">5</span> );</pre>
</div>
<p>&nbsp;</p>
<p>二，$.post(url,[data],[callback],[type])</p>
<p>说明：这个函数跟$.get()参数差不多，多了一个type参数，type为返回的数据类型，可以是html,xml,json等类型，如果我们设置这个参数为：json，那么返回的格式则是json格式的，如果没有设置，就 和$.get()返回的格式一样，都是字符串的。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $.post("emp.do?p=getAllEmp",{id:deptId,x:Math.random()},<span style="color: #0000ff;">function</span><span style="color: #000000;">(data){
</span><span style="color: #008080;">2</span>             <span style="color: #0000ff;">var</span> arry = eval("("+data+")");<span style="color: #008000;">//</span><span style="color: #008000;">去引号，将json字符串去引号编程json类型数组，也可以在$.post函数后面加一个参数"json"，指定接收的数据为json类型的</span>
<span style="color: #008080;">3</span>             <span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">var</span> i=0;i&lt;arry.length;i++<span style="color: #000000;">){
</span><span style="color: #008080;">4</span>                 <span style="color: #0000ff;">var</span> op = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Option(arry[i].empName,arry[i].empId);
</span><span style="color: #008080;">5</span>                 document.getElementById("emp"<span style="color: #000000;">).options.add(op);
</span><span style="color: #008080;">6</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">7</span>         });</pre>
</div>
<p>也可以写成下面这样，返回的就是json类型数组了，就不要难过去引号了，可以直接遍历。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $.post("emp.do?p=getAllEmp",{id:deptId,x:Math.random()},<span style="color: #0000ff;">function</span><span style="color: #000000;">(arry){
</span><span style="color: #008080;">2</span>             <span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">var</span> i=0;i&lt;arry.length;i++<span style="color: #000000;">){
</span><span style="color: #008080;">3</span>                 <span style="color: #0000ff;">var</span> op = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Option(arry[i].empName,arry[i].empId);
</span><span style="color: #008080;">4</span>                 document.getElementById("emp"<span style="color: #000000;">).options.add(op);
</span><span style="color: #008080;">5</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">6</span>         },"json");</pre>
</div>
<p>三，$.ajax(opiton)</p>
<p>说明：$.ajax()这个函数功能强大，可以对ajax进行许多精确的控制，需要详细说明的请参照相关资料</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">$.ajax({
</span><span style="color: #008080;">2</span> 　　url: "ajax/ajax_selectPicType.jsp"<span style="color: #000000;">,
</span><span style="color: #008080;">3</span> 　　data:{Full:"fu"<span style="color: #000000;">},
</span><span style="color: #008080;">4</span> 　　type: "POST"<span style="color: #000000;">,
</span><span style="color: #008080;">5</span> 　　dataType:'json'<span style="color: #000000;">,
</span><span style="color: #008080;">6</span> 　　<span style="color: #000000;">success:CallBack,
</span><span style="color: #008080;">7</span> 　　error:<span style="color: #0000ff;">function</span><span style="color: #000000;">(er){
</span><span style="color: #008080;">8</span> 　　<span style="color: #000000;">BackErr(er);}
</span><span style="color: #008080;">9</span> });</pre>
</div>
<p>四，$.getJSON(url,[data],[callback])</p>
<p>说明:$.getJSON(url,[data],[callback])函数没有type参数，返回的是json类型的，不需要转换。</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> $.getJSON("dep.do?p=getAllDep",{x:Math.random()},<span style="color: #0000ff;">function</span><span style="color: #000000;">(arry){
</span><span style="color: #008080;">2</span>             <span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">var</span> i=0;i&lt;arry.length;i++<span style="color: #000000;">){
</span><span style="color: #008080;">3</span>                 <span style="color: #0000ff;">var</span> op = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Option(arry[i].deptName,arry[i].deptId);
</span><span style="color: #008080;">4</span>                 document.getElementById("dep"<span style="color: #000000;">).options.add(op);
</span><span style="color: #008080;">5</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">6</span>         });</pre>
</div>
<p>&nbsp;</p>
<p>jquery的其他一些函数：</p>
<p>载入静态页面</p>
<p>load( url, [data], [callback] );<br />url (String) 请求的HTML页的URL地址<br />data (Map)(可选参数) 发送至服务器的 key/value 数据<br />callback (Callback) (可选参数) 请求完成时(不需要是success的)的回调函数</p>
<p>load()方法可以轻松载入静态页面内容到指定jQuery对象。<br />$('#ajax-div').load('data.html');</p>
<p><br />这样，data.html的内容将被载入到ID为ajax-div的DOM对象之内。你甚至可以通过制定ID来实现载入部分内容的Ajax操作，如：</p>
<p><br />$('#ajax-div').load('data.html#my-section');<br />实现GET和POST方法 </p>
<p>get( url, [data], [callback] )<br />url (String) 发送请求的URL地址.<br />data (Map)(可选参数) 要发送给服务器的数据，以 Key/value 的键值对形式表示，会做为QueryString附加到请求URL中<br />callback (Callback) (可选参数) 载入成功时回调函数(只有当Response的返回状态是success才是调用该方法)</p>
<p>很显然这是一个专门实现GET方式的函数，使用起来也相当的简单<br />$.get('login.jsp', {<br />&nbsp;&nbsp; id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 'Robin',<br />&nbsp;&nbsp; password: '123456',<br />&nbsp;&nbsp; gate&nbsp;&nbsp;&nbsp; : 'index'<br />&nbsp; }, function(data, status) {<br />&nbsp;&nbsp; //data为返回对象，status为请求的状态<br />&nbsp;&nbsp; alert(data);<br />&nbsp;&nbsp; //此时假设服务器脚本会返回一段文字"你好，Robin！"，<br />那么浏览器就会弹出对话框显示该段文字<br />&nbsp;&nbsp; alert(status);<br />&nbsp;&nbsp; //结果为success, error等等，但这里是成功时才能运行的函数<br />&nbsp; });</p>
<p>&nbsp;</p>
<p>post( url, [data], [callback], [type] )</p>
<p>url (String) 发送请求的URL地址.<br />data (Map)(可选参数) 要发送给服务器的数据，以 Key/value 的键值对形式表示<br />callback (Callback) (可选参数) 载入成功时回调函数(只有当Response的返回状态是success才是调用该方法)<br />type (String) (可选参数) 请求数据的类型，xml,text,json等</p>
<p>同样是jQuery提供的一个简便函数，其实用法<br />&nbsp;<br />$.post('regsiter.jsp', {<br />&nbsp;&nbsp; id:'Robin',<br />&nbsp;&nbsp; password: '123456',<br />&nbsp;&nbsp; type:'user'<br />&nbsp; },function(data, status) {<br />&nbsp;&nbsp; alert(data);<br />&nbsp; }, "json");</p>
<p>&nbsp;</p>
<p>事件驱动的脚本载入函数：getScript()</p>
<p>getScript( url, [callback] )<br />url (String) 待载入 JS 文件地址<br />callback (Function) (可选) 成功载入后回调函数</p>
<p>getScript()函数可以远程载入JavaScript脚本并且执行。这个函数可以跨 域载入JS文件（神奇&hellip;&hellip;？！）。这个函数的意义是巨大 的，它可以很大程度的缩减页面初次载入的代码量，因为你可以根据用户的交互来载入相应的JS文件，而不必在页面初始化的时候全部载入。<br />&nbsp;<br />$.getScript('ajaxEvent.js', function() {<br />&nbsp;&nbsp; alert("Scripts Loaded!");<br />&nbsp;&nbsp; //载入ajaxEvent.js，并且在成功载入后显示对话框提示。<br />&nbsp; });</p>
<p>&nbsp;</p>
<p>构建数据通讯的桥梁：getJSON()</p>
<p>getJSON(url,[data],[callback])<br />url (String) 发送请求地址<br />data (Map) (可选) 待发送 Key/value 参数<br />callback (Function) (可选) 载入成功时回调函数。</p>
<p>JSON是一种理想的数据传输格式，它能够很好的融合与JavaScript或其他宿主语 言，并且可以被JS直接使用。使用JSON相比传统的通过 GET、POST直接发送&rdquo;裸体&rdquo;数据，在结构上更为合理，也更为安全。至于jQuery的getJSON()函数，只是设置了JSON参数的 ajax()函数的一个简化版本。这个函数也是可以跨域使用的，相比get()、post()有一定优势。另外这个函数可以通过把请求url写 成&rdquo;myurl?callback=X&rdquo;这种格式，让程序执行回调函数X。</p>
<p>$.getJSON('feed.jsp',{<br />&nbsp;&nbsp; request: images,<br />&nbsp;&nbsp; id:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 001,<br />&nbsp;&nbsp; size:&nbsp;&nbsp;&nbsp; large<br />&nbsp;&nbsp; }, function(json) {<br />&nbsp;&nbsp;&nbsp; alert(json.images[0].link);<br />&nbsp;&nbsp;&nbsp; //此处json就是远程传回的json对象，假设其格式如下：<br />&nbsp;&nbsp;&nbsp; //{'images' : [<br />&nbsp;&nbsp;&nbsp; // {link: images/001.jpg, x :100, y : 100},<br />&nbsp;&nbsp;&nbsp; // {link: images/002.jpg, x : 200, y 200:}<br />&nbsp;&nbsp;&nbsp; //]};<br />&nbsp;&nbsp; }<br />&nbsp;);</p>
<p>&nbsp;</p>
<p>更底层的ajax()函数<br />虽然get()和post()函数非常简洁易用，但是对于更复杂的一些设计需求还是无法实现，比如在ajax发送的不同时段做出不同的动作等。jQuery提供一个更为具体的函数：ajax()。</p>
<p>ajax( options )<br />ajax()提供了一大票参数，所以可以实现相当复杂的功能。 </p>
<p>参数名 类型 描述 <br />url String (默认: 当前页地址) 发送请求的地址。 <br />type String (默认: &ldquo;GET&rdquo;) 请求方式 (&ldquo;POST&rdquo; 或 &ldquo;GET&rdquo;)， 默认为 &ldquo;GET&rdquo;。<br />注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。 <br />timeout Number 设置请求超时时间（毫秒）。此设置将覆盖全局设置。 <br />async Boolean (默认: true) 默认设置下，所有请求均为异步请求。<br />如果需要发送同步请求，请将此选项设置为 false。<br />注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。 <br />beforeSend Function 发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。</p>
<p>XMLHttpRequest 对象是唯一的参数。</p>
<p>function (XMLHttpRequest) {<br />this; // the options for this ajax request<br />}</p>
<p><br />&nbsp;<br />cache Boolean (默认: true) jQuery 1.2 新功能，设置为 false 将不会从浏览器缓存中加载请求信息。 <br />complete Function 请求完成后回调函数 (请求成功或失败时均调用)。</p>
<p>参数： XMLHttpRequest 对象，成功信息字符串。</p>
<p>function (XMLHttpRequest, textStatus) {<br />this; // the options for this ajax request<br />}</p>
<p><br />&nbsp;<br />contentType String (默认: &ldquo;application/x-www-form-urlencoded&rdquo;) 发送信息至服务器时内容编码类型。默认值适合大多数应用场合。 <br />data Object,<br />String 发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。<br />查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。<br />如果为数组，jQuery 将自动为不同值对应同一个名称。<br />如 {foo:["bar1", "bar2"]} 转换为 &lsquo;&amp;foo=bar1&amp;foo=bar2&prime;。 <br />dataType String 预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息<br />返回 responseXML 或 responseText，并作为回调函数参数传递，可用值: </p>
<p>&ldquo;xml&rdquo;: 返回 XML 文档，可用 jQuery 处理。</p>
<p>&ldquo;html&rdquo;: 返回纯文本 HTML 信息；包含 script 元素。</p>
<p>&ldquo;script&rdquo;: 返回纯文本 JavaScript 代码。不会自动缓存结果。</p>
<p>&ldquo;json&rdquo;: 返回 JSON 数据 。</p>
<p>&ldquo;jsonp&rdquo;: JSONP 格式。使用 JSONP 形式调用函数时，</p>
<p>如 &ldquo;myurl?callback=?&rdquo; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。<br />&nbsp;<br />error Function (默认: 自动判断 (xml 或 html)) 请求失败时将调用此方法。 </p>
<p>这个方法有三个参数：XMLHttpRequest 对象，错误信息，（可能）捕获的错误对象。</p>
<p>function (XMLHttpRequest, textStatus, errorThrown) {<br />// 通常情况下textStatus和errorThown只有其中一个有值<br />this; // the options for this ajax request<br />}</p>
<p><br />&nbsp;<br />global Boolean (默认: true) 是否触发全局 AJAX 事件。设置为 false 将不会触发全局 AJAX 事件， </p>
<p>如 ajaxStart 或 ajaxStop 。可用于控制不同的Ajax事件<br />&nbsp;<br />ifModified Boolean (默认: false) 仅在服务器数据改变时获取新数据。 </p>
<p>使用 HTTP 包 Last-Modified 头信息判断。<br />&nbsp;<br />processData Boolean (默认: true) 默认情况下，发送的数据将被转换为对象(技术上讲并非字符串) </p>
<p>以配合默认内容类型 &ldquo;application/x-www-form-urlencoded&rdquo;。</p>
<p>如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。<br />&nbsp;<br />success Function 请求成功后回调函数。这个方法有两个参数：服务器返回数据，返回状态</p>
<p>function (data, textStatus) {<br />// data could be xmlDoc, jsonObj, html, text, etc...<br />this;<br />&nbsp;// the options for this ajax request<br />}</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>你 可以指定xml、script、html、json作为其数据类型，可以为beforeSend、error、sucess、complete等状态设置 处理函数，众多其它参数也可以订完完全全定义用户的Ajax体验。下面的例子中，我们用ajax()来调用一个XML文档：</p>
<p>$.ajax({<br />&nbsp;&nbsp;&nbsp; url: 'doc.xml',<br />&nbsp;&nbsp;&nbsp; type: 'GET',<br />&nbsp;&nbsp;&nbsp; dataType: 'xml',<br />&nbsp;&nbsp;&nbsp; timeout: 1000,<br />&nbsp;&nbsp;&nbsp; error: function(){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert('Error loading XML document');<br />&nbsp;&nbsp;&nbsp; },<br />&nbsp;&nbsp;&nbsp; success: function(xml){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(xml);<br />&nbsp; //此处xml就是XML的jQuery对象了，你可以用find()、next()或XPath等方法在里面寻找节点，<br />和用jQuery操作HTML对象没有区别<br />&nbsp;&nbsp;&nbsp; }<br />});</p>
<p><br />进一步了解AJAX事件<br />前面讨论的一些方法都有自己的事件处理机制，从页面整体来说，都只能说是局部函数。jQuery提供了AJAX全局函数的定义，以满足特殊的需求。下面是jQuery提供的所有函数（按照触发顺序排列如下）：</p>
<p>ajaxStart<br />(全局事件) 开始新的Ajax请求，并且此时没有其他ajax请求正在进行<br />beforeSend<br />(局部事件) 当一个Ajax请求开始时触发。如果需要，你可以在这里设置XMLHttpRequest对象<br />ajaxSend<br />(全局事件) 请求开始前触发的全局事件<br />success<br />(局部事件) 请求成功时触发。即服务器没有返回错误，返回的数据也没有错误<br />ajaxSuccess<br />全局事件全局的请求成功<br />error<br />(局部事件) 仅当发生错误时触发。你无法同时执行success和error两个回调函数<br />ajaxError<br />全局事件全局的发生错误时触发<br />complete<br />(局部事件) 不管你请求成功还是失败，即便是同步请求，你都能在请求完成时触发这个事件<br />ajaxComplete<br />全局事件全局的请求完成时触发<br />ajaxStop<br />(全局事件) 当没有Ajax正在进行中的时候，触发<br />局部事件在之前的函数中都有介绍，我们主要来看看全局事件。对某个对象进行全局事件监听，那么全局中的AJAX动作，都会对其产生影响。比如，当页面在进行AJAX操作时，ID为&rdquo;loading&rdquo;的DIV就显示出来：</p>
<p>&nbsp;<br />$("#loading").ajaxStart(function(){<br />&nbsp;&nbsp; $(this).show();<br />&nbsp;});</p>
<p>&nbsp;</p>
<p>全局事件也可以帮助你编写全局的错误相应和成功相应，而不需要为每个AJAX请求独立设置。有必要指出，全局事件的参数是很有用的。除了 ajaxStart、ajaxOptions，其他事件均有event, XMLHttpRequest, ajaxOptions三个参数。第一个参数即事件本身；第二个是XHR对象；第三个是你传递的ajax参数对象。在一个对象里显示全局的AJAX情况：</p>
<p><br />$("#msg").beforeSend(function(e,xhr,o) {<br />&nbsp;$(this).html("正在请求"+o.url);<br />&nbsp;}).ajaxSuccess(function(e,xhr,o) {<br />&nbsp;$(this).html(o.url+"请求成功");<br />&nbsp;}).ajaxError(function(e,xhr,o) {<br />&nbsp;$(this).html(o.url+"请求失败");<br />});</p>
<p>&nbsp;</p>
<p>很显然，第三个参数也可以帮助你传递你在AJAX事件里加入的自定义参数。 在单个AJAX请求时，你可以将global的值设为false，以将此请求独立于AJAX的全局事件。</p>
<p>&nbsp;<br />$.ajax({<br />&nbsp;&nbsp; url: "request.jsp",<br />&nbsp;&nbsp; global: false,<br />&nbsp;&nbsp; // 禁用全局Ajax事件.<br />&nbsp;});</p>
<p>&nbsp;</p>
<p>如果你想为全局AJAX设置参数，你会用上ajaxSetup()函数。例如，将所有AJAX请求都传递到request.php，；禁用全局方法；强制用POST方法传递：</p>
<p><br />$.ajaxSetup({<br />&nbsp; url: "request.jsp",<br />&nbsp; global: false,<br />&nbsp; type: "POST"<br />});</p>
<p>&nbsp;</p>
<p>一些你不得不知道的方法<br />写AJAX肯定离不开从页面获取相应的值。在这里简单列举一些方法：</p>
<p>val() <br />val()函数可以返回表单组建的值，例如任何种类input的值。配合选择符操作，你可以轻易获取选项组、输入框、按钮等元素的值。</p>
<p><br />$("input[name='info']:text").val();<br />//返回名字为info的文本框的值<br />$("input[name='pass']:password").val();<br />//返回名字为pass的密码框的值<br />$("input[name='save']:radio").val();<br />//返回名字为save的单选项的值<br />//以此类推</p>
<p>&nbsp;</p>
<p>serialize()</p>
<p>serialize函数可以帮你把表单对象的所有值都转换为字符串序列。如果你要写GET格式的请求，这个就非常方便了。<br />serializeArray()<br />和serialize()类似，只不过它返回的是JSON对象。</p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2013-02-07 16:46</span> <a href='http://www.cnblogs.com/liuling/'>残剑_</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://i.cnblogs.com/EditPosts.aspx?postid=2908828" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(2908828);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=122373,cb_entryId=2908828,cb_blogApp=currentBlogApp,cb_blogUserGuid='bb406e7b-23ba-e111-aa3f-842b2b196315',cb_entryCreatedDate='2013/2/7 16:46:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    var enableGoogleAd = canShowAdsense(); 
    fixPostBodyFormat();
</script>
<script type='text/javascript'>
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') +
              '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
  })();
</script>
<script type='text/javascript'>
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function() {
            googletag.defineSlot('/1090369/cnblogs_blogpost_C2', [468, 60], 'div-gpt-ad-1433581717989-0').addService(googletag.pubads());
            googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1433581717989-1').addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.pubads().collapseEmptyDivs();
            googletag.enableServices();
            });
        };
    } catch (e) { }
</script>
<div id="google_ad_c1" class="c_ad_block">
    <div id='div-gpt-ad-1433581717989-1' style='height:250px; width:300px;'>
    <script type='text/javascript'>
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1433581717989-1'); });
            } else {
                $('#div-gpt-ad-1433581717989-1').hide();
            }
    } catch (e) { }
    </script>
    </div>
</div>
<div id="under_post_news"></div>
<div id="google_ad_c2" class="c_ad_block">
<div id='div-gpt-ad-1433581717989-0' style='height:60px; width:468px;'>
<script type='text/javascript'>
try {
    if (enableGoogleAd) {
        googletag.cmd.push(function () { googletag.display('div-gpt-ad-1433581717989-0'); });
    } else {
        $('#div-gpt-ad-1433581717989-0').hide();
    }
} catch (e) { }
</script>
</div>
</div>
<div id="under_post_kb"></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
</script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2015 残剑_
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
</body>
</html>
